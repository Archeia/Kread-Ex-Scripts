#:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=
#  ▼ Plane
#  Author: Kread-EX
#  Version 1.01
#  Release date: 08/01/2013
#:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=:=

#------------------------------------------------------------------------------
#  ▼ UPDATES
#------------------------------------------------------------------------------
# #  11/04/2013. Added compatibility with Yanfly's Parallax Lock.
#------------------------------------------------------------------------------
#  ▼ TERMS OF USAGE
#------------------------------------------------------------------------------
# #  You are free to adapt this work to suit your needs.
# #  You can use this work for commercial purposes if you like it.
# #
# # For support:
# # grimoirecastle.wordpress.com
# # rpgmakerweb.com
#------------------------------------------------------------------------------
#  ▼ INTRODUCTION
#------------------------------------------------------------------------------
# # Rewrite the Plane class to work with Esrever's hacked DLL. Plug-and-play.
#------------------------------------------------------------------------------

#==============================================================================
# ■ Plane
#==============================================================================

class Plane
  #--------------------------------------------------------------------------
  # ● Object initialize
  #--------------------------------------------------------------------------
  def initialize(view = nil)
    @viewport = view
    @sprite = Sprite.new(@viewport)
  end
  #--------------------------------------------------------------------------
  # ● Free
  #--------------------------------------------------------------------------
  def dispose
    @sprite.dispose
  end
  #--------------------------------------------------------------------------
  # ● Get freed
  #--------------------------------------------------------------------------
  def disposed?
    @sprite.disposed?
  end
  #--------------------------------------------------------------------------
  # ● Get visible
  #--------------------------------------------------------------------------
  def visible
    @sprite.visible
  end
  #--------------------------------------------------------------------------
  # ● Set visible
  #--------------------------------------------------------------------------
  def visible=(value)
    @sprite.visible = value
  end
  #--------------------------------------------------------------------------
  # ● Get zoom x
  #--------------------------------------------------------------------------
  def zoom_x
    @sprite.zoom_x
  end
  #--------------------------------------------------------------------------
  # ● Set zoom x
  #--------------------------------------------------------------------------
  def zoom_x=(value)
    @sprite.zoom_x = value
  end
  #--------------------------------------------------------------------------
  # ● Get zoom y
  #--------------------------------------------------------------------------
  def zoom_y
    @sprite.zoom_y
  end
  #--------------------------------------------------------------------------
  # ● Set zoom y
  #--------------------------------------------------------------------------
  def zoom_y=(value)
    @sprite.zoom_y = value
  end
  #--------------------------------------------------------------------------
  # ● Get opacity
  #--------------------------------------------------------------------------
  def opacity
    @sprite.opacity
  end
  #--------------------------------------------------------------------------
  # ● Set opacity
  #--------------------------------------------------------------------------
  def opacity=(value)
    @sprite.opacity = value
  end
  #--------------------------------------------------------------------------
  # ● Get blend type
  #--------------------------------------------------------------------------
  def blend_type
    @sprite.blend_type
  end
  #--------------------------------------------------------------------------
  # ● Set blend type
  #--------------------------------------------------------------------------
  def blend_type=(value)
    @sprite.blend_type = value
  end
  #--------------------------------------------------------------------------
  # ● Get color
  #--------------------------------------------------------------------------
  def color
    @sprite.color
  end
  #--------------------------------------------------------------------------
  # ● Set color
  #--------------------------------------------------------------------------
  def color=(value)
    @sprite.color = value
  end
  #--------------------------------------------------------------------------
  # ● Get tone
  #--------------------------------------------------------------------------
  def tone
    @sprite.tone
  end
  #--------------------------------------------------------------------------
  # ● Set tone
  #--------------------------------------------------------------------------
  def tone=(value)
    @sprite.tone = value
  end
  #--------------------------------------------------------------------------
  # ● Frame update
  #--------------------------------------------------------------------------
  def update
    @sprite.update
  end
  #--------------------------------------------------------------------------
  # ● Get viewport
  #--------------------------------------------------------------------------
  def viewport
    @viewport
  end
  #--------------------------------------------------------------------------
  # ● Set viewport
  #--------------------------------------------------------------------------
  def viewport=(value)
    @viewport = value
    @sprite.viewport = viewport
  end
  #--------------------------------------------------------------------------
  # ● Get bitmap
  #--------------------------------------------------------------------------
  def bitmap
    @sprite.bitmap
  end
  #--------------------------------------------------------------------------
  # ● Set bitmap
  #--------------------------------------------------------------------------
  def bitmap=(value)
    if value.nil?
      @sprite.bitmap = value
      return
    end
    bw = @viewport ? @viewport.rect.width : Graphics.width
    bh = @viewport ? @viewport.rect.height : Graphics.height
    if SceneManager.scene.is_a?(Scene_Map) && $game_map.parallax_tile_lock?
      bw = $game_map.width * 32
      bh = $game_map.height * 32
    end
    rw = bw.fdiv(value.width).ceil
    rh = bh.fdiv(value.height).ceil
    new_bmp = Bitmap.new(bw, bh)
    0.upto(rw).each do |x|
      0.upto(rh).each do |y|
        new_bmp.blt(x * value.width, y * value.height, value, value.rect)
      end
    end
    @sprite.bitmap = new_bmp
  end
  #--------------------------------------------------------------------------
  # ● Get ox
  #--------------------------------------------------------------------------
  def ox
    @sprite.ox
  end
  #--------------------------------------------------------------------------
  # ● Set ox
  #--------------------------------------------------------------------------
  def ox=(nox)
    @sprite.ox = nox
  end
  #--------------------------------------------------------------------------
  # ● Get oy
  #--------------------------------------------------------------------------
  def oy
    @sprite.oy
  end
  #--------------------------------------------------------------------------
  # ● Set oy
  #--------------------------------------------------------------------------
  def oy=(noy)
    @sprite.oy = noy
  end
  #--------------------------------------------------------------------------
  # ● Get z
  #--------------------------------------------------------------------------
  def z
    @sprite.z
  end
  #--------------------------------------------------------------------------
  # ● Set z
  #--------------------------------------------------------------------------
  def z=(z)
    @sprite.z = z
  end
end